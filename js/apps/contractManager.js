import { generateId, showNotification } from '../main.js';
import { getStandardAppToolbarHTML, initializeFileState, setupAppToolbarActions } from './app.js';

export function openContractManager() {
    const uniqueSuffix = generateId('contract');
    const winId = window.windowManager.createWindow('Gestão de Contratos', '', { width: '1000px', height: '750px', appType: 'contract-manager' });
    const content = ` <div class="app-toolbar">${getStandardAppToolbarHTML()}</div> <div class="contract-main-form"><h4><i class="fas fa-file-signature"></i> Detalhes do Contrato</h4><div class="form-grid"><input type="text" id="contractNumber_${uniqueSuffix}" class="app-input" placeholder="Número/Processo do Contrato"><input type="text" id="contractVendor_${uniqueSuffix}" class="app-input" placeholder="Contratado/Fornecedor"><select id="contractStatus_${uniqueSuffix}" class="app-select contract-status-select"><option value="elaboracao">Em Elaboração</option> <option value="ativo" selected>Ativo/Vigente</option><option value="suspenso">Suspenso</option> <option value="encerrado">Encerrado</option> <option value="cancelado">Cancelado</option></select><textarea id="contractObject_${uniqueSuffix}" class="app-textarea" placeholder="Objeto do Contrato" style="min-height:60px; grid-column: span 2;"></textarea><input type="number" id="contractTotalValue_${uniqueSuffix}" class="app-input" placeholder="Valor Total (R$)" step="0.01"><input type="date" id="contractStartDate_${uniqueSuffix}" class="app-input" title="Data de Início/Vigência"><input type="date" id="contractEndDate_${uniqueSuffix}" class="app-input" title="Data de Término da Vigência"><input type="text" id="contractManagerName_${uniqueSuffix}" class="app-input" placeholder="Fiscal/Gestor do Contrato"></div></div> <div class="contract-tracking-tabs"><button class="contract-tab-button active" data-tab="financial_${uniqueSuffix}"><i class="fas fa-coins"></i>Financeiro</button><button class="contract-tab-button" data-tab="physical_${uniqueSuffix}"><i class="fas fa-tasks"></i>Físico</button><button class="contract-tab-button" data-tab="amendments_${uniqueSuffix}"><i class="fas fa-file-medical"></i>Aditivos</button><button class="contract-tab-button" data-tab="invoices_${uniqueSuffix}"><i class="fas fa-receipt"></i>Notas Fiscais</button><button class="contract-tab-button" data-tab="documents_${uniqueSuffix}"><i class="fas fa-folder-plus"></i>Documentos</button></div> <div id="financial_${uniqueSuffix}" class="contract-tab-content"><div class="app-section"> <h4>Lançamentos Financeiros</h4> <table class="app-table" id="financialTable_${uniqueSuffix}"><thead><tr><th>Data</th><th>Tipo</th><th>Descrição</th><th>Valor (R$)</th><th>Ações</th></tr></thead><tbody></tbody></table> <button id="addFinancialEntryBtn_${uniqueSuffix}" class="app-button secondary small-add"><i class="fas fa-plus"></i> Lançamento</button> </div><div class="app-section"> <h4>Resumo Financeiro</h4> <p>Valor Total: <strong id="summaryTotalValue_${uniqueSuffix}">0.00 R$</strong></p> <p>Total Empenhado: <strong id="summaryTotalEmpenhado_${uniqueSuffix}">0.00 R$</strong></p> <p>Total Pago: <strong id="summaryTotalPago_${uniqueSuffix}">0.00 R$</strong></p> <p>Saldo a Empenhar: <strong id="summarySaldoEmpenhar_${uniqueSuffix}">0.00 R$</strong></p> <p>Saldo a Pagar: <strong id="summarySaldoPagar_${uniqueSuffix}">0.00 R$</strong></p> </div></div> <div id="physical_${uniqueSuffix}" class="contract-tab-content" style="display:none;"> <div class="app-section"><h4>Marcos/Entregas</h4><table class="app-table" id="physicalTable_${uniqueSuffix}"><thead><tr><th>Item</th><th>Qtde</th><th>Un.</th><th>Previsto</th><th>Realizado</th><th>Status</th><th>%</th><th>Obs.</th><th>Ações</th></tr></thead><tbody></tbody></table><button id="addPhysicalEntryBtn_${uniqueSuffix}" class="app-button secondary small-add"><i class="fas fa-plus"></i> Marco</button></div> </div> <div id="amendments_${uniqueSuffix}" class="contract-tab-content" style="display:none;"> <div class="app-section"><h4>Aditivos/Alterações</h4><table class="app-table" id="amendmentsTable_${uniqueSuffix}"><thead><tr><th>Tipo</th><th>Ref.</th><th>Data</th><th>Objeto</th><th>Valor</th><th>Nova Vigência</th><th>Ações</th></tr></thead><tbody></tbody></table><button id="addAmendmentEntryBtn_${uniqueSuffix}" class="app-button secondary small-add"><i class="fas fa-plus"></i> Aditivo</button></div> </div> <div id="invoices_${uniqueSuffix}" class="contract-tab-content" style="display:none;"> <div class="app-section"><h4>Notas Fiscais</h4><table class="app-table" id="invoiceTable_${uniqueSuffix}"><thead><tr><th>Nº NF</th><th>Emissão</th><th>Valor NF</th><th>Atesto</th><th>Fiscal</th><th>Obs.</th><th>Ações</th></tr></thead><tbody></tbody></table><button id="addInvoiceEntryBtn_${uniqueSuffix}" class="app-button secondary small-add"><i class="fas fa-plus"></i> NF</button></div> </div> <div id="documents_${uniqueSuffix}" class="contract-tab-content" style="display:none;"> <div class="app-section"><h4>Documentos</h4><table class="app-table" id="documentsTable_${uniqueSuffix}"><thead><tr><th>Nome</th><th>Caminho/Link</th><th>Tipo</th><th>Data</th><th>Ações</th></tr></thead><tbody></tbody></table><button id="addDocumentEntryBtn_${uniqueSuffix}" class="app-button secondary small-add"><i class="fas fa-link"></i> Vincular</button></div> </div>`;
    const winData = window.windowManager.windows.get(winId); if (!winData) return winId; winData.element.querySelector('.window-content').innerHTML = content;
    const appState = {
        winId, appDataType: 'contract-manager',
        data: { details: { number: '', vendor: '', object: '', totalValue: 0, startDate: '', endDate: '', managerName: '', status: 'ativo' }, financial: [], physical: [], amendments: [], invoices: [], documents: [] },
        ui: { detailsForm: { number: winData.element.querySelector(`#contractNumber_${uniqueSuffix}`), vendor: winData.element.querySelector(`#contractVendor_${uniqueSuffix}`), object: winData.element.querySelector(`#contractObject_${uniqueSuffix}`), totalValue: winData.element.querySelector(`#contractTotalValue_${uniqueSuffix}`), startDate: winData.element.querySelector(`#contractStartDate_${uniqueSuffix}`), endDate: winData.element.querySelector(`#contractEndDate_${uniqueSuffix}`), managerName: winData.element.querySelector(`#contractManagerName_${uniqueSuffix}`), status: winData.element.querySelector(`#contractStatus_${uniqueSuffix}`)}, tabButtons: winData.element.querySelectorAll('.contract-tab-button'), tabContents: winData.element.querySelectorAll('.contract-tab-content'), financialTableBody: winData.element.querySelector(`#financialTable_${uniqueSuffix} tbody`), physicalTableBody: winData.element.querySelector(`#physicalTable_${uniqueSuffix} tbody`), amendmentsTableBody: winData.element.querySelector(`#amendmentsTable_${uniqueSuffix} tbody`), invoicesTableBody: winData.element.querySelector(`#invoiceTable_${uniqueSuffix} tbody`), documentsTableBody: winData.element.querySelector(`#documentsTable_${uniqueSuffix} tbody`), summary: { totalValue: winData.element.querySelector(`#summaryTotalValue_${uniqueSuffix}`), totalEmpenhado: winData.element.querySelector(`#summaryTotalEmpenhado_${uniqueSuffix}`), totalPago: winData.element.querySelector(`#summaryTotalPago_${uniqueSuffix}`), saldoEmpenhar: winData.element.querySelector(`#summarySaldoEmpenhar_${uniqueSuffix}`), saldoPagar: winData.element.querySelector(`#summarySaldoPagar_${uniqueSuffix}`) }, addFinancialBtn: winData.element.querySelector(`#addFinancialEntryBtn_${uniqueSuffix}`), addPhysicalBtn: winData.element.querySelector(`#addPhysicalEntryBtn_${uniqueSuffix}`), addAmendmentBtn: winData.element.querySelector(`#addAmendmentEntryBtn_${uniqueSuffix}`), addInvoiceBtn: winData.element.querySelector(`#addInvoiceEntryBtn_${uniqueSuffix}`), addDocumentBtn: winData.element.querySelector(`#addDocumentEntryBtn_${uniqueSuffix}`), },
        getData: function() { this.updateDetailsFromUI(); return this.data; },
        loadData: function(dataString, fileMeta) { 
            try { 
                const data = JSON.parse(dataString);
                this.data = { details: {}, financial: [], physical: [], amendments: [], invoices: [], documents: [], ...data }; 
                this.fileId = fileMeta.id; 
                this.markClean(); 
                window.windowManager.updateWindowTitle(this.winId, fileMeta.name); 
                this.renderAll(); 
            } catch (e) {
                 showNotification("Erro ao ler arquivo de contrato.", 3000); 
            }
        },
        init: function() { 
            setupAppToolbarActions(this);
            this.ui.tabButtons.forEach(button => button.onclick = () => { this.ui.tabButtons.forEach(btn => btn.classList.remove('active')); this.ui.tabContents.forEach(content => content.style.display = 'none'); button.classList.add('active'); winData.element.querySelector(`#${button.dataset.tab}`).style.display = 'block'; }); 
            this.ui.addFinancialBtn.onclick = () => this.addEntry('financial', {id: generateId('fin'), date: new Date().toISOString().split('T')[0], type: 'empenho', description: '', value: 0}); 
            this.ui.addPhysicalBtn.onclick = () => this.addEntry('physical', {id: generateId('phy'), item: '', quantity: 1, unit: 'Un', date_planned: '', date_done: null, status: 'pendente', percent_complete:0, notes:''}); 
            this.ui.addAmendmentBtn.onclick = () => this.addEntry('amendments', {id: generateId('amd'), type:'aditivo', number_ref:'', date: new Date().toISOString().split('T')[0], object_change:'', value_change:0, new_end_date: null}); 
            this.ui.addInvoiceBtn.onclick = () => this.addEntry('invoices', {id: generateId('inv'), number:'', date_issue:new Date().toISOString().split('T')[0], value:0, date_attested: null, attested_by:'', notes:''}); 
            this.ui.addDocumentBtn.onclick = () => this.addEntry('documents', {id: generateId('doc'), name:'', path_or_link:'', type:'contrato_original', date_added:new Date().toISOString().split('T')[0]}); 
            ['financial', 'physical', 'amendments', 'invoices', 'documents'].forEach(type => { this.ui[`${type}TableBody`].addEventListener('click', (e) => this.handleTableAction(e, type)); this.ui[`${type}TableBody`].addEventListener('input', (e) => this.handleTableInput(e, type)); }); 
            Object.values(this.ui.detailsForm).forEach(input => { input.oninput = () => {this.markDirty(); this.updateDetailsFromUI()}; }); 
            this.renderAll(); 
        },
        updateDetailsFromUI: function() { for(const key in this.ui.detailsForm){ this.data.details[key] = (this.ui.detailsForm[key].type === 'number') ? parseFloat(this.ui.detailsForm[key].value) || 0 : this.ui.detailsForm[key].value; } this.renderFinancialSummary(); },
        renderAll: function() { for(const key in this.ui.detailsForm){ if(this.data.details[key] !== undefined) this.ui.detailsForm[key].value = this.data.details[key]; } this.renderTable('financial', (e) => `<td><input type="date" class="app-input" value="${e.date||''}" data-field="date"></td><td><select class="app-select" data-field="type"><option value="empenho" ${e.type==='empenho'?'selected':''}>Empenho</option><option value="reforco_empenho" ${e.type==='reforco_empenho'?'selected':''}>Reforço</option><option value="anulacao_empenho" ${e.type==='anulacao_empenho'?'selected':''}>Anulação</option><option value="pagamento" ${e.type==='pagamento'?'selected':''}>Pagamento</option></select></td><td><input type="text" class="app-input" value="${e.description||''}" data-field="description"></td><td><input type="number" class="app-input" value="${e.value||0}" step="0.01" data-field="value"></td>`); this.renderTable('physical', (e) => `<td><input type="text" class="app-input" value="${e.item||''}" data-field="item"></td><td><input type="number" class="app-input" value="${e.quantity||0}" data-field="quantity"></td><td><input class="app-input" value="${e.unit||'Un'}" data-field="unit"></td><td><input type="date" class="app-input" value="${e.date_planned||''}" data-field="date_planned"></td><td><input type="date" class="app-input" value="${e.date_done||''}" data-field="date_done"></td><td><input class="app-input" value="${e.status||'pendente'}" data-field="status"></td><td><input type="number" class="app-input" value="${e.percent_complete||0}" data-field="percent_complete"></td><td><input type="text" class="app-input" value="${e.notes||''}" data-field="notes"></td>`); this.renderTable('amendments', (e) => `<td><input type="text" class="app-input" value="${e.type||''}" data-field="type"></td><td><input type="text" class="app-input" value="${e.number_ref||''}" data-field="number_ref"></td><td><input type="date" class="app-input" value="${e.date||''}" data-field="date"></td><td><input type="text" class="app-input" value="${e.object_change||''}" data-field="object_change"></td><td><input type="number" class="app-input" value="${e.value_change||0}" data-field="value_change"></td><td><input type="date" class="app-input" value="${e.new_end_date||''}" data-field="new_end_date"></td>`); this.renderTable('invoices', (e) => `<td><input type="text" class="app-input" value="${e.number||''}" data-field="number"></td><td><input type="date" class="app-input" value="${e.date_issue||''}" data-field="date_issue"></td><td><input type="number" class="app-input" value="${e.value||0}" data-field="value"></td><td><input type="date" class="app-input" value="${e.date_attested||''}" data-field="date_attested"></td><td><input type="text" class="app-input" value="${e.attested_by||''}" data-field="attested_by"></td><td><input type="text" class="app-input" value="${e.notes||''}" data-field="notes"></td>`); this.renderTable('documents', (e) => `<td><input type="text" class="app-input" value="${e.name||''}" data-field="name"></td><td><input type="text" class="app-input" value="${e.path_or_link||''}" data-field="path_or_link"></td><td><input class="app-input" value="${e.type||'outro'}" data-field="type"></td><td><input type="date" class="app-input" value="${e.date_added||''}" data-field="date_added"></td>`); this.renderFinancialSummary(); },
        renderTable: function(type, rowRenderFn) { const tableBody = this.ui[`${type}TableBody`]; tableBody.innerHTML = ''; (this.data[type] = this.data[type] || []).forEach((entry) => { const row = tableBody.insertRow(); row.dataset.id = entry.id; row.innerHTML = rowRenderFn(entry) + `<td><button class="app-button danger action-button" data-action="delete" title="Excluir"><i class="fas fa-trash"></i></button></td>`; }); },
        renderFinancialSummary: function() { const totalValue = this.data.details.totalValue || 0; let totalEmpenhado = 0; let totalPago = 0; (this.data.financial || []).forEach(f => { const val = f.value || 0; if (f.type === 'empenho' || f.type === 'reforco_empenho') totalEmpenhado += val; else if (f.type === 'anulacao_empenho') totalEmpenhado -= val; else if (f.type === 'pagamento') totalPago += val; }); this.ui.summary.totalValue.textContent = totalValue.toFixed(2) + " R$"; this.ui.summary.totalEmpenhado.textContent = totalEmpenhado.toFixed(2) + " R$"; this.ui.summary.totalPago.textContent = totalPago.toFixed(2) + " R$"; this.ui.summary.saldoEmpenhar.textContent = (totalValue - totalEmpenhado).toFixed(2) + " R$"; this.ui.summary.saldoPagar.textContent = (totalEmpenhado - totalPago).toFixed(2) + " R$"; },
        addEntry: function(type, template) { (this.data[type] = this.data[type] || []).push({...template, id: generateId(type.slice(0,3))}); this.markDirty(); this.renderAll(); },
        handleTableAction: function(e, tableType) { const button = e.target.closest('button[data-action="delete"]'); if (button) { const rowId = button.closest('tr').dataset.id; this.data[tableType] = (this.data[tableType] || []).filter(item => item.id !== rowId); this.markDirty(); this.renderAll(); } },
        handleTableInput: function(e, tableType) { const input = e.target.closest('input, select, textarea'); if (input) { const rowId = input.closest('tr').dataset.id; const field = input.dataset.field; const entry = (this.data[tableType] || []).find(item => item.id === rowId); if (entry) { entry[field] = (input.type==='number') ? parseFloat(input.value) || 0 : input.value; this.markDirty(); if(tableType==='financial') this.renderFinancialSummary();} } },
        cleanup: () => {}
    };
    initializeFileState(appState, 'Novo Contrato', 'contrato.contract', 'contract-manager');
    winData.currentAppInstance = appState;
    appState.init();
    return winId;
}
