import { generateId, showNotification } from '../main.js';
import { getStandardAppToolbarHTML, initializeFileState, setupAppToolbarActions } from './app.js';

export function openGanttChart() {
    const uniqueSuffix = generateId('gantt');
    const winId = window.windowManager.createWindow('Cronograma Gantt', '', { width: '1150px', height: '650px', appType: 'gantt-chart' });
    const content = `
        <div class="app-toolbar gantt-controls">
             ${getStandardAppToolbarHTML()}
             <button id="addGanttTaskBtn_${uniqueSuffix}" class="app-button" style="margin-left: auto;"><i class="fas fa-plus"></i> Nova Tarefa</button>
            <span style="margin-left:15px; font-size:0.9em;">Escala:</span>
            <select id="ganttTimeScale_${uniqueSuffix}" class="app-select" style="width:100px;"> <option value="days">Dias</option> <option value="weeks">Semanas</option> <option value="months">Meses</option> </select>
            <span style="margin-left:10px; font-size:0.9em;">Zoom: </span>
            <input type="range" id="ganttZoom_${uniqueSuffix}" min="20" max="150" value="30" style="width:100px;">
        </div>
        <div class="gantt-main-area">
            <div class="gantt-table-wrapper" id="ganttTableWrapper_${uniqueSuffix}">
                <div class="gantt-table-header"> <span>ID</span><span>Nome</span><span>Início</span><span>Fim</span><span>Dura.</span><span>%</span><span>Recursos</span><span>Deps.</span><span>Ações</span> </div>
                <div id="ganttTableBody_${uniqueSuffix}" style="flex-grow:1; overflow-y:auto;"></div>
            </div>
            <div class="gantt-chart-area-wrapper" id="ganttChartAreaWrapper_${uniqueSuffix}">
                <div class="gantt-timeline-header" id="ganttTimelineHeader_${uniqueSuffix}"></div>
                <div id="ganttChartBars_${uniqueSuffix}" style="position:relative;"></div>
            </div>
        </div>`;
    const winData = window.windowManager.windows.get(winId); if(!winData) return winId;
    winData.element.querySelector('.window-content').innerHTML = content;

    const appState = {
        winId, tasks: [], appDataType: 'gantt-chart',
        tableBody: winData.element.querySelector(`#ganttTableBody_${uniqueSuffix}`), chartBarsContainer: winData.element.querySelector(`#ganttChartBars_${uniqueSuffix}`), timelineHeader: winData.element.querySelector(`#ganttTimelineHeader_${uniqueSuffix}`), addTaskBtn: winData.element.querySelector(`#addGanttTaskBtn_${uniqueSuffix}`), zoomSlider: winData.element.querySelector(`#ganttZoom_${uniqueSuffix}`), timeScaleSelect: winData.element.querySelector(`#ganttTimeScale_${uniqueSuffix}`),
        getData: function() { return this.tasks; },
        loadData: function(dataString, fileMeta) { 
            try { 
                const data = JSON.parse(dataString);
                this.tasks = Array.isArray(data) ? data : []; 
                this.fileId = fileMeta.id; 
                this.markClean(); 
                window.windowManager.updateWindowTitle(this.winId, fileMeta.name); 
                this.renderAll(); 
            } catch (e) { 
                showNotification("Erro ao ler arquivo Gantt.", 3000); 
            } 
        },
        init: function() { setupAppToolbarActions(this); this.addTaskBtn.onclick = () => this.addTask(); this.zoomSlider.oninput = () => this.renderChart(); this.timeScaleSelect.onchange = () => this.renderChart(); this.tableBody.addEventListener('input', (e) => this.handleTableInput(e)); this.tableBody.addEventListener('click', (e) => this.handleTableAction(e)); this.renderAll(); },
        renderAll: function() { this.renderTable(); this.renderChart(); },
        renderTable: function() { this.tableBody.innerHTML = ''; this.tasks.forEach((task) => { const row = document.createElement('div'); row.className = 'gantt-task-table-row'; row.dataset.taskId = task.id; row.innerHTML = `<span>${task.id.slice(-4)}</span> <input type="text" class="app-input" value="${task.name}" data-field="name" title="${task.name}"> <input type="date" class="app-input" value="${task.start || ''}" data-field="start"> <input type="date" class="app-input" value="${task.end || ''}" data-field="end"> <input type="number" class="app-input" value="${task.duration || ''}" data-field="duration" min="0" title="Duração (dias)"> <input type="number" class="app-input" value="${task.progress || 0}" data-field="progress" min="0" max="100" title="% Concluída"> <input type="text" class="app-input" value="${task.resources || ''}" data-field="resources" placeholder="Ex: Rec1, Rec2"> <input type="text" class="app-input" value="${task.dependencies || ''}" data-field="dependencies" placeholder="IDs: ${task.id.slice(-4)}"> <div><button class="app-button danger action-button" data-action="delete" title="Excluir"><i class="fas fa-trash"></i></button></div>`; this.tableBody.appendChild(row); }); },
        renderChart: function() { this.chartBarsContainer.innerHTML = ''; this.timelineHeader.innerHTML = ''; if (this.tasks.length === 0) return; let minDateOverall = null, maxDateOverall = null; this.tasks.forEach(task => { if (task.start) { const startDate = new Date(task.start + "T00:00:00Z"); if (!minDateOverall || startDate < minDateOverall) minDateOverall = startDate; } if (task.end) { const endDate = new Date(task.end + "T00:00:00Z"); if (!maxDateOverall || endDate > maxDateOverall) maxDateOverall = endDate; } }); if (!minDateOverall || !maxDateOverall || minDateOverall > maxDateOverall) { this.chartBarsContainer.innerHTML = '<p style="padding:10px; color:var(--secondary-text-color)">Datas inválidas.</p>'; return; } const timeScale = this.timeScaleSelect.value; const unitVisualWidth = parseInt(this.zoomSlider.value) || 30; const paddedMinDate = new Date(minDateOverall); paddedMinDate.setUTCDate(paddedMinDate.getUTCDate() - (timeScale === 'months' ? 30 : (timeScale === 'weeks' ? 14 : 7))); const paddedMaxDate = new Date(maxDateOverall); paddedMaxDate.setUTCDate(paddedMaxDate.getUTCDate() + (timeScale === 'months' ? 60 : (timeScale === 'weeks' ? 28 : 14))); let currentTimelineDate = new Date(paddedMinDate); let timelineHTML = ''; let totalVisualUnits = 0; const getDaysBetween = (d1, d2) => Math.ceil(Math.abs(d1 - d2) / (864e5)); if (timeScale === "days") { while(currentTimelineDate <= paddedMaxDate) { timelineHTML += `<span style="display:inline-block; width:${unitVisualWidth}px; text-align:center; border-right:1px solid var(--separator-color); font-size:0.8em;">${currentTimelineDate.getUTCDate()}/${currentTimelineDate.getUTCMonth()+1}</span>`; currentTimelineDate.setUTCDate(currentTimelineDate.getUTCDate() + 1); totalVisualUnits++; } } else if (timeScale === "weeks") { currentTimelineDate = new Date(paddedMinDate); currentTimelineDate.setUTCDate(currentTimelineDate.getUTCDate() - currentTimelineDate.getUTCDay()); while(currentTimelineDate <= paddedMaxDate) { const weekEnd = new Date(currentTimelineDate); weekEnd.setUTCDate(currentTimelineDate.getUTCDate() + 6); timelineHTML += `<span style="display:inline-block; width:${unitVisualWidth}px; text-align:center; border-right:1px solid var(--separator-color); font-size:0.8em;" title="Semana de ${currentTimelineDate.toLocaleDateString()} a ${weekEnd.toLocaleDateString()}">S${currentTimelineDate.getUTCDate()}/${currentTimelineDate.getUTCMonth()+1}</span>`; currentTimelineDate.setUTCDate(currentTimelineDate.getUTCDate() + 7); totalVisualUnits++; } } else if (timeScale === "months") { currentTimelineDate = new Date(paddedMinDate); currentTimelineDate.setUTCDate(1); while(currentTimelineDate <= paddedMaxDate) { const monthName = currentTimelineDate.toLocaleString('pt-BR', { month: 'short', year: '2-digit' }); timelineHTML += `<span style="display:inline-block; width:${unitVisualWidth}px; text-align:center; border-right:1px solid var(--separator-color); font-size:0.8em;">${monthName}</span>`; currentTimelineDate.setUTCMonth(currentTimelineDate.getUTCMonth() + 1); totalVisualUnits++; } } this.timelineHeader.innerHTML = timelineHTML; this.chartBarsContainer.style.width = `${totalVisualUnits * unitVisualWidth}px`; this.tasks.forEach((task, index) => { const tableRowEl = this.tableBody.querySelector(`.gantt-task-table-row[data-task-id="${task.id}"]`); const rowHeight = tableRowEl ? tableRowEl.offsetHeight : 30; if (!task.start || !task.end) return; const startDate = new Date(task.start + "T00:00:00Z"); const endDate = new Date(task.end + "T00:00:00Z"); if (startDate > endDate) return; let barOffsetUnits, barDurationUnits; let effectivePaddedMinDate = new Date(paddedMinDate); if (timeScale === "days") { barOffsetUnits = getDaysBetween(effectivePaddedMinDate, startDate); barDurationUnits = getDaysBetween(startDate, endDate) + 1; } else if (timeScale === "weeks") { effectivePaddedMinDate.setUTCDate(effectivePaddedMinDate.getUTCDate() - effectivePaddedMinDate.getUTCDay()); barOffsetUnits = Math.floor(getDaysBetween(effectivePaddedMinDate, startDate) / 7); barDurationUnits = Math.ceil((getDaysBetween(startDate, endDate) + 1) / 7); } else if (timeScale === "months") { effectivePaddedMinDate.setUTCDate(1); const startMonthSeq = startDate.getUTCFullYear() * 12 + startDate.getUTCMonth(); const endMonthSeq = endDate.getUTCFullYear() * 12 + endDate.getUTCMonth(); const minMonthSeq = effectivePaddedMinDate.getUTCFullYear() * 12 + effectivePaddedMinDate.getUTCMonth(); barOffsetUnits = startMonthSeq - minMonthSeq; barDurationUnits = (endMonthSeq - startMonthSeq) + 1; } barDurationUnits = Math.max(barDurationUnits, 0.1); const barRow = document.createElement('div'); barRow.className = 'gantt-bar-row'; barRow.style.height = `${rowHeight}px`; barRow.style.lineHeight = `${rowHeight}px`; const bar = document.createElement('div'); bar.className = 'gantt-bar'; bar.style.backgroundColor = task.color || 'var(--accent-color)'; const progress = task.progress || 0; if (progress >= 100) bar.classList.add('gantt-bar-complete'); bar.style.left = `${barOffsetUnits * unitVisualWidth}px`; bar.style.width = `${barDurationUnits * unitVisualWidth - 2}px`; bar.style.top = `calc((${rowHeight}px - 20px) / 2)`; bar.title = `${task.name} (${progress}%) - ${new Date(task.start + "T00:00:00Z").toLocaleDateString()} a ${new Date(task.end + "T00:00:00Z").toLocaleDateString()}`; bar.textContent = `${task.name} (${progress}%)`; const progressBarEl = document.createElement('div'); progressBarEl.className = 'progress'; progressBarEl.style.width = `${progress}%`; bar.appendChild(progressBarEl); barRow.appendChild(bar); this.chartBarsContainer.appendChild(barRow); }); },
        calculateDuration: function(start, end) { if (!start || !end) return null; const startDate = new Date(start + "T00:00:00Z"); const endDate = new Date(end + "T00:00:00Z"); if (endDate < startDate) return null; return Math.ceil(Math.abs(endDate - startDate) / (864e5)) + 1; },
        calculateEndDate: function(start, duration) { if (!start || !duration || duration <= 0) return null; const startDate = new Date(start + "T00:00:00Z"); startDate.setUTCDate(startDate.getUTCDate() + parseInt(duration) -1); return startDate.toISOString().split('T')[0]; },
        handleTableInput: function(e) { const rowEl = e.target.closest('.gantt-task-table-row'); if (!rowEl) return; const taskId = rowEl.dataset.taskId; const task = this.tasks.find(t => t.id === taskId); if (!task) return; const field = e.target.dataset.field; task[field] = e.target.value; if (field === 'start' || field === 'end') { if(task.start && task.end) { task.duration = this.calculateDuration(task.start, task.end); rowEl.querySelector('input[data-field="duration"]').value = task.duration || ''; } } else if (field === 'duration') { if(task.start && task.duration > 0) { task.end = this.calculateEndDate(task.start, task.duration); rowEl.querySelector('input[data-field="end"]').value = task.end || ''; } } this.markDirty(); this.renderChart(); },
        handleTableAction: function(e) { const button = e.target.closest('button[data-action="delete"]'); if (button) { const taskId = button.closest('.gantt-task-table-row').dataset.taskId; this.tasks = this.tasks.filter(t => t.id !== taskId); this.markDirty(); this.renderAll(); } },
        addTask: function() { const defaultColors = ['#007AFF', '#34C759', '#FF9500', '#AF52DE', '#FF2D55', '#5AC8FA', '#FFCC00', '#8E8E93']; const color = defaultColors[this.tasks.length % defaultColors.length]; this.tasks.push({id: generateId('gtsk'), name: 'Nova Tarefa', start: '', end: '', duration: 1, progress: 0, resources: '', dependencies: '', color: color}); this.markDirty(); this.renderAll(); },
        cleanup: () => {}
    };
    
    initializeFileState(appState, "Novo Cronograma", "cronograma.gantt", "gantt-chart");
    winData.currentAppInstance = appState;
    appState.init();
    return winId;
}